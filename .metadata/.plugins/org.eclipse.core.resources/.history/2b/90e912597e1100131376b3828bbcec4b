package com.example.ebook_v1;


import java.io.File;

import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class ListViewUtills
{
	String currentPath;//当前路径
	ScrollBar reader;//Activity的引用
	
	Boolean judgeTimes=false;//判读是否是第一次打开软件
	
	public ListViewUtills(ScrollBar reader)
	{
		this.reader=reader;//拿到引用
	}
	//用来获取路径下的文件数组
	public File[] getFiles(String filePath)
	{
		File[] files=new File(filePath).listFiles();//获取当前目录下的文件    	
		return files;
	}
	//将查找 文件列表添加到ListView中
	public void intoListView(final File[] files,final ListView lv)
	{
		if(files!=null)//当文件列表不为空时
		{
			if(files.length==0)//当前目录为空
			{				
				File cf=new File(currentPath);//获取当前文件列表的路径对应的文件
				cf=cf.getParentFile();//获取父目录文件
				currentPath=cf.getPath();//记录当前文件列表路径
				Toast.makeText
				(
						reader, 
						"该文件夹为空！！", 
						Toast.LENGTH_SHORT
				).show();  
			}
			else
			{
				BaseAdapter ba=new BaseAdapter()//创建适配器
				{
					@Override
					public int getCount() {
						return files.length;
					}
					@Override
					public Object getItem(int position) {
						return null;
					}
	
					@Override
					public long getItemId(int position) {				
						return 0;
					}
		        			
					@Override
					public View getView(int arg0, View arg1, ViewGroup arg2) {
		        				
						//初始化LinearLayout
						LinearLayout ll=new LinearLayout(reader);
						ll.setOrientation(LinearLayout.HORIZONTAL);//设置朝向	
						ll.setPadding(5,5,5,5);//设置四周留白
	
						//初始化ImageView
						ImageView  ii=new ImageView(reader);
						String s=files[arg0].getPath();
						File f=new File(s);//获得文件对象
						char c[]=s.toCharArray();
						int i=s.length();
						if(f.isDirectory())//存在分支
						{
							ii.setImageDrawable(reader.getResources().getDrawable(R.drawable.sl_file));//设置图片
						}else if(c[i-1]=='t'&&c[i-2]=='x'&&c[i-3]=='t')
						{
							ii.setImageDrawable(reader.getResources().getDrawable(R.drawable.sl_txt));
						}
						else
						{
							ii.setImageDrawable(reader.getResources().getDrawable(R.drawable.sl_else));
						}
						ii.setScaleType(ImageView.ScaleType.FIT_XY);//按照原图比例
						ii.setLayoutParams(new Gallery.LayoutParams(60,60));//图片的大小设置
						ll.addView(ii);//添加到LinearLayout中
								
						//初始化TextView
						TextView tv=new TextView(reader);
						tv.setText(files[arg0].getName());//添加文件名称
						tv.setTextSize(18);//设置字体大小
						tv.setTextColor(reader.getResources().getColor(R.color.white));//设置字体颜色
						tv.setPadding(5,5,5,5);//设置四周留白
						tv.setGravity(Gravity.RIGHT);
						ll.addView(tv);//添加到LinearLayout中				
						return ll;
					}        	
				};
				lv.setAdapter(ba);//设置适配器
		            	
				lv.setOnItemClickListener//设置选中菜单的监听器
				(
					new OnItemClickListener()
					{
						@Override
						public void onItemClick(AdapterView<?> arg0, View arg1,
								int arg2, long arg3) {
					
							File f=new File(files[arg2].getPath());//获得当前点击的文件对象
							if(f.isDirectory())//存在分支
							{
								currentPath=files[arg2].getPath();//获取路径
								File[] fs=getFiles(currentPath);//获取当前路径下所有子文件
								intoListView(fs,lv);//将子文件列表填入ListView中
							}
							else 
							{
								//reader.saveCurrentData();//换书之前（即：Constant.FILE_PATH变化之前），将当前书的全部信息存入数据库
								
								String s=files[arg2].getPath();//获取路径
								char c[]=s.toCharArray();
		        				int i=s.length();
		        				if(c[i-1]=='t'&&c[i-2]=='x'&&c[i-3]=='t')
		        				{
		        					
		        					Constant.FILE_PATH=files[arg2].getPath();//获取路径
									Constant.TEXTNAME=files[arg2].getName();//获取文件的名字
		        					Constant.CONTENTCOUNT=TextLoadUtil.getCharacterCount(Constant.FILE_PATH);//调用getCharacterCount方法   					
		        					//当选择另一本书时，数据库中查找，是否已经读过这本书的记录
		        					try
		        					{
		        						judgeTimes=SQLDBUtil.judgeIsWhichTime(Constant.FILE_PATH);
		        						Log.v("guningyi->","filename="+Constant.FILE_PATH);
		        						Log.v("guningyi->","judgeTimes="+judgeTimes);
		        						//System.out.println("judgeTimes="+judgeTimes+"####");
		        					}catch(Exception e)
		        					{
		        						e.printStackTrace();
		        					}
		        					
		        					//if(judgeTimes)//如果是第一次打开这本书，
		        					{
		        						reader.saveCurrentData();//换书之后，当前信息存入数据库BookRecord，否则无法存书签(没有班级，哪里来的学生)
		        						Constant.CURRENT_LEFT_START=0;
			        					Constant.CURRENT_PAGE=0;
			        					String x = reader.read_text(reader.currRR);
			        					reader.showContent(x);
			        					//reader.goToReaderView();
		        					}
		        					else//否则，在数据库中取出数据
		        					{
		        						try
		        						{
		        							//在数据库中取出hashMap
		        							byte[] data=SQLDBUtil.selectRecordData(Constant.FILE_PATH);
		        							//为readerView中的hashMap
		        							reader.currBook=SQLDBUtil.fromBytesToListRowNodeList(data);//将byte型数据转化为hashMap型的数据
		        							int page=SQLDBUtil.getLastTimePage(Constant.FILE_PATH);//得到这本书上一次读到的位置
		        							int fontsize=SQLDBUtil.getLastTimeFontSize(Constant.FILE_PATH);//得到上一次的字体大小
		        							if(fontsize!=Constant.TEXT_SIZE)//如果此次打开与上一次打开时，字体大小不同
		        							{
		        								//reader.updataBookMarkAndHashMap();//更新书签或者是hashMap
		        								
		        							}

		        							reader.currRR=reader.currBook.get(page);//根据hashMap的索引取出ReadRecord的对象（记录当前书页的左上点索引）
		        			        		Constant.CURRENT_LEFT_START=reader.currRR.start;//为当前书页左上索引赋值
		        			        		Constant.CURRENT_PAGE=reader.currRR.pageNo;//为当前书页的page赋值      	
		        			        		
		        						}catch(Exception e)
		        						{
		        							e.printStackTrace();
		        						}
		        						
			        					//reader.goToReaderView();
		        					}
		        				}else
		        				{
		        					Toast.makeText
		        					(
		        						reader, 
		        						"请打开.txt文件", 
		        						Toast.LENGTH_SHORT
		        					).show();
		        				}
		        			}        						
						}
					}
				);
			}    
		}
		else
		{
			File cf=new File(currentPath);//获取当前文件列表的路径对应的文件
			cf=cf.getParentFile();//获取父目录文件
			currentPath=cf.getPath();//记录当前文件列表路径
			Toast.makeText
			(
				reader, 
				"已经到根目录了", 
				Toast.LENGTH_SHORT
			).show();
		}
	}
}